@page "/"
@using WeatherAcquisition.Interfaces.Base.Repositories
@using WeatherAcquisition.Domain.Base.Models

@*Добавляем сервис*@
@inject IRepository<DataSourceDomainBaseModel> _repository


<h3>Источники данных</h3>

@*Кнопка обновления*@
@*<button class="btn btn-primary" @onclick="RefreshButton_OnClick">Обновить</button>*@
@*или*@
<button class="btn btn-primary" @onclick="async () => await UpdateSources()">Обновить</button>


@*Стандартная форма Добавления*@
<EditForm Model="_newDataSource" OnValidSubmit="CreateSource">
    <div class="row">
        <div class="col-3">
            <InputText id="new-datasource-name" @bind-Value="_newDataSource.Name"/>    @*- поле ввода с привязкой данных*@ 
        </div>
        <div class="col-9">
            <InputTextArea id="new-datasource-description" @bind-Value="_newDataSource.Description"/>
        </div>
    </div>
    <button class="btn btn-outline-primary" type="submit">Создать</button>
</EditForm>


@*Отображение данных:*@
@if (_sources is { } sources)
{
    @*- на этап 2 отрендериваем полученные данные*@
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Название</th>
                <th>Описание</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var src in sources)
            {
                <tr>
                    <td>@src.Id</td>
                    <td>@src.Name</td>
                    <td>@src.Description</td>
                    <td>
                        @* Удаление источника данных*@
                        <button class="btn btn-outline-danger" @onclick="() => Remove(src)">
                            <i class="fa fa-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading... </p> @*- на первом этапе данных нет, отображаем загрузку*@
}




@code {
    private IList<DataSourceDomainBaseModel>? _sources;

    private DataSourceDomainBaseModel _newDataSource = new();   // - поле для добавления новых сущностей и использования в форме

    //##############################################################################################
    #region INITIALIZATION

    protected override async Task OnInitializedAsync()
        => await UpdateSources();

    #endregion



    //##############################################################################################
    #region EVENTS

    // <summary>
    /// Событие кнопки "Обновить исчтоники данных"
    /// </summary>
    /// <returns></returns>
    private async Task RefreshButton_OnClick()
        => await UpdateSources();


    #endregion // EVENTS


    //##############################################################################################
    #region METODS

    /// <summary>
    /// Обновление источников данных
    /// </summary>
    /// <returns></returns>
    private async Task UpdateSources()
    {
        _sources = (await _repository
                            .GetAllAsync())
                            .OrderBy(o => o.Name)
                            .ToList()
                            ;
        Console.WriteLine("Запрос источников данных завершен");     // вывод в консоль отладки в браузере
    }

    /// <summary>
    /// Удаление источников данных
    /// </summary>
    /// <param name="source">Удаляемый источник</param>
    private async Task Remove(DataSourceDomainBaseModel source)
    {
        if (_sources is not { Count: > 0 })
            return;

        var removed = await _repository.DeleteAsync(source);
        if  (removed is not null)
            _sources.Remove(source);

    }


    /// <summary>
    /// Добавление нового источника данных
    /// </summary>
    /// <returns></returns>
    private async Task CreateSource()
    {
        var newDataSource = await _repository.AddAsync(_newDataSource);
        if (newDataSource is null)
            return;

        _sources?.Add(newDataSource);

        _newDataSource = new(); // очищаем временную переменную для новых источников данных
    }

    #endregion // METODS


}


